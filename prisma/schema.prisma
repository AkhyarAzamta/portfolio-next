generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  role         UserRole @default(USER)
  avatar       String?
  title        String?
  bio          String?
  githubUrl    String?
  linkedinUrl  String?
  instagramUrl String?
  blogs        Blog[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  excerpt   String
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  slug      String   @unique
  published Boolean  @default(false)
  archived  Boolean  @default(false)
  viewCount Int      @default(0) // Added for view tracking
  tags      String[] // Added for tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Project {
  id           String   @id @default(cuid()) // Using cuid() instead of autoincrement()
  title        String
  description  String
  technologies String[]
  sourceCode   String?
  demoLink     String?
  image        String
  archived     Boolean  @default(false)
  price        Float?
  githubLink   String?
  env          String?
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("projects")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model About {
  id        Int      @id @default(autoincrement())
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("about")
}

model SkillCategory {
  id          Int      @id @default(autoincrement())
  name        String
  icon        String
  description String?
  skills      Skill[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("skill_categories")
}

model Skill {
  id         Int           @id @default(autoincrement())
  name       String
  logo       String
  category   SkillCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("skills")
}

model Experience {
  id          Int      @id @default(autoincrement())
  title       String
  company     String
  period      String
  description String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("experiences")
}

model Education {
  id          Int      @id @default(autoincrement())
  degree      String
  institution String
  period      String
  description String?
  grade       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("education")
}

model ContactInfo {
  id        Int      @id @default(autoincrement())
  type      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_info")
}

model Certificate {
  id            Int       @id @default(autoincrement())
  name          String
  issuer        String
  issueDate     DateTime
  expiryDate    DateTime?
  credentialURL String?
  image         String? // New field for certificate image
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("certificates")
}

model LanguageSkill {
  id        Int      @id @default(autoincrement())
  name      String
  level     Int // 1-100 percentage
  category  String? // e.g., "Programming", "Spoken", "Written"
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("language_skills")
}
